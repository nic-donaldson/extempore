;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; pattern.xtm
;;
;; a basic sexpr pattern library
;; 
;; variables defined by ?
;; named variables of the form <name>?
;; 
;; greedy variable ??
;; named greedy variable <name>??
;;
;; typed variable
;; ?symbol | ?number | ?string | ?list | ?pair | ?atom
;;
;; named typed greedy variable
;; <name>??string
;;
;; custom typed variables can be defined
;; ??<top-level-defined-predicate-function-name>
;;
;; named variables are returned with their match
;;
;; see examples for examples
;;

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;;; Code:

(define MATCH-FAILED 'match-failed)
(define MATCH-TRUE '())

;; is this a "match variable" 
(define variable-constructor
  (lambda (em)
    (cond ((symbol? em)
            (let ((res (regex:matched (symbol->string em) "^([^?]*)(\\?+)(.*)$")))
              (if (null? res)
                  (list em "" "????" "literal")
                  res)))
          (else (list em "" "????" "literal"))))) ;; 4 * ???? for literal  (was #f)

(define match-symbol
  (lambda (e em)
    (if (not (symbol? em)) MATCH-FAILED
        (if (string=? (symbol->string e) (symbol->string em))
            MATCH-TRUE ;; e
            MATCH-FAILED))))

(define match-string
  (lambda (e em)
    (if (not (string? em)) MATCH-FAILED
        (if (string=? e em)
            MATCH-TRUE ;; e
            MATCH-FAILED))))

(define match-number
  (lambda (e em)
    (if (not (number? em)) MATCH-FAILED
        (if (= e em)
            MATCH-TRUE ;; e
            MATCH-FAILED))))

(define match-vector
  (lambda (e em)
    (if (not (vector? em)) MATCH-FAILED
        (if (= e em)
            MATCH-TRUE ;; e
            MATCH-FAILED))))
                    
(define istrue
  (lambda (x) (equal? x #t)))

(define get-true-matches
  (lambda (lst)
    (foldl (let ((g #t)) 
              (lambda (l x)
                (if (and (eqv? x #t) g) 
                    (cons x l)
                    (begin (set! g #f) l))))
              '() lst)))

(define get-matching-length
  (lambda (expr var)
    (let* ((checklist (map (lambda (x) 
                          (match-check-variable-predicates x var))
                      expr)))
      (length (get-true-matches checklist)))))

(define get-var-em-size
  (lambda (var)
    (if (or (null? var) (eqv? var #f))
        1
        (if (= (string-length (caddr var)) 3)
            0 
            1))))

;; where em is the match expression (i.e. with variables etc..)
(define get-em-length
  (lambda (ems var)
    (apply + (map get-var-em-size ems))))

(define literal-match?
  (lambda (expr em)
    (and (string=? (cadddr em) "literal")
         (equal? (car em) expr))))

(define literal-match?
  (lambda (expr em)
    (let* ((a (string=? (cadddr em) "literal"))
           (b (match-expr expr (car em)))
           (b2 (if (or (eqv? b #f) 
                       (equal? b (list MATCH-FAILED))
                       (equal? b MATCH-FAILED))
                   #f 
                   #t)))
      ;; (println 'expr expr 'em em 'a a 'b b 'b2 b2 '-- (if (and a b2) #t #f))
      (if (and a b2) #t #f))))

;; this DOES try to match a expr to a literal em
;; but DOES NOT currently try to match an expr to a PAIR
;; which it needs to do!!!
;; i.e. we need to be calling (expr-match e em) if (pair? e)
; (define check-for-literal-match-or-pair
;   (lambda (expr ems)
;     (if (null? ems)
;         expr
;         (let* ((em (car ems))
;                (res (map (lambda (e) 
;                            (if (pair? e)
;                                #f
;                                (not (literal-match? e em))))
;                          expr))
;                (num-of-non-literal (length (get-true-matches res))))
;           (list-head expr num-of-non-literal)))))

(define check-for-literal-match
  (lambda (expr ems)
    (if (null? ems)
        expr
        (let* ((em (car ems))
               (res (map (lambda (e) 
                           (not (literal-match? e em)))
                         expr))
               (num-of-non-literal (length (get-true-matches res))))
          (list-head expr num-of-non-literal)))))

(define process-multi-variable
  (lambda (e em var)
    (let* ((multi (string-length (caddr var)))
           (ems (map variable-constructor (cdr em)))
           ;; (e2 (check-for-literal-match-or-pair e ems))
           (e2 (check-for-literal-match e ems))
          ; (emlgth (if (> multi 1) (get-em-length ems var) 0))
           (emlgth (get-em-length ems var))
           (elgth (length e))
           (matchlgth (if (> multi 1) (get-matching-length e2 var) 0))
          ;  (globlgth (if (= elgth emlgth) 
          ;                (if (= multi 3) 0 matchlgth) 
          ;                (min matchlgth (- elgth emlgth))))
           (globlgth (min matchlgth (- elgth emlgth)))
           (matchedlst (list-head e globlgth))
           (restlst (if (> globlgth 0) (list-tail e globlgth) '())))
    ;; (println 'process-multi multi 'e e 'em em 'emlgth emlgth 'elgth elgth 'matchlght matchlgth 'matched matchedlst 'res restlst) 
    (if (> multi 1)
        (if (= matchlgth 0)
            (if (= multi 2) ;; if ?? 
                (list MATCH-FAILED) ;; then fail
                (match-list e (cdr em))) ;; otherwise ??? means 0 or more so just skip forward var (not expr)
            (list (match-expr matchedlst (string->symbol (string-append (cadr var) (caddr var) "list")))
                  (if (null? restlst) '() (match-list restlst (cdr em)))))
        (if (<> (length e) (length em))
            MATCH-FAILED
            (list (match-expr (car e) (car em))
                  (if (null? (cdr e)) 
                      '() 
                      (match-expr (cdr e) (cdr em)))))))))

(define is-match-multi?
  (lambda (x)
    (let ((slgth (string-length (caddr x))))
      (or (= 2 slgth) (= 3 slgth)))))
                           
;; where 
;; e = expression
;; em = match-expression
(define match-list
  (lambda (e em)
    ;; (println 'match-list e 'em em)
    (if (null? e) 
        (if (and (not (null? em)) 
                 (not (member #t (map is-match-multi? (map variable-constructor em)))))
            MATCH-FAILED
            '())
        (if (or (not (list? em)) (null? em)) 
            MATCH-FAILED
            (let ((var (variable-constructor (car em))))
              (if (string=? (cadddr var) "literal")
                  (cond 
                    ((list? (car e)) 
                    (list (match-list (car e) (car em))
                          (match-list (cdr e) (cdr em))))
                    ((pair? (car e)) 
                    (list (match-pair (car e) (car em))
                          (match-list (cdr e) (cdr em))))
                    ((equal? (car e) (car var)) 
                    (match-list (cdr e) (cdr em)))                     
                    (else MATCH-FAILED))
                  (process-multi-variable e em var)))))))

(define match-pair
  (lambda (e em)
    (if (not (pair? em)) 
        MATCH-FAILED
        (list (match-expr (car e) (car em))
              (match-expr (cdr e) (cdr em))))))
          
(define match-check-variable-predicates
  (lambda (e var)
    (let ((predicate (cadddr var))
          (matchtype (cadr var))
          (expr e))
      (cond ((string=? predicate "list") (list? expr))
            ((string=? predicate "number") (number? expr))
            ((string=? predicate "atom") (atom? expr))
            ((string=? predicate "pair") (pair? expr))
            ((string=? predicate "symbol") (symbol? expr))
            ((string=? predicate "string") (string? expr))
            ((string=? predicate "defined") (defined? expr))
            ((string=? predicate "") #t)
            ((and (defined? (string->symbol predicate))
                  (closure? (eval (string->symbol predicate)))) ((eval (string->symbol predicate)) expr))
            (else #f)))))

(define match-check-variable
  (lambda (e var)
    (if (and (string=? (cadr var) "")
             (string=? (cadddr var) ""))
        MATCH-TRUE
        (if (match-check-variable-predicates e var)
            (if (string=? (cadr var) "") 
                MATCH-TRUE
                (vector (cadr var) e))
            MATCH-FAILED))))
          
(define match-expr
  (lambda (e em)
    ;; (println 'match-expr e 'em em)
    (let ((var (variable-constructor em)))
      (if (and (list? var) (not (null? var)) (not (string=? "literal" (cadddr var))))
          (match-check-variable e var)
          (cond ((symbol? e) (match-symbol e em))
                ((string? e) (match-string e em))
                ((number? e) (match-number e em))
                ((vector? e) (match-vector e em))
                ((list? e) (let ((res (match-list e em)))
                             (if (list? res)
                                 (flatten res)
                                 (list res))))
                ((pair? e) (match-pair e em))
                (else MATCH-FAILED))))))

;; returns #f if failed match
;; returns a list of matched variables (or null if no variable names specified.)
(define match
  (lambda (em)
    (lambda (e)
      (let* ((res (match-expr e em))
            (pairs (if (null? res) '()
                      (map (lambda (x) 
                              (if (vector? x)
                                  (vector->list x)
                                  x))
                            res))))
        (if (tree-member MATCH-FAILED res) 
            #f 
            pairs)))))

(define mkey
  (lambda (key match-result)
    (if (symbol? key) (set! key (symbol->string key)))
    (if (list? match-result)
        (let ((res (map cadr (filter (lambda (x) 
                                      (equal? (car x) key))
                                    match-result))))
          (flatten res))
        #f)))


;;;; general expression code

(define subst replace-all)

(define substp
  (lambda (expr env)
    (println (subst expr env))))

;; find free (undefined) variables in expr
(define free-vars
  (lambda (expr . args)
    (cond ((symbol? expr) (if (defined? expr) '() expr))
          ((atom? expr) '())
          ((list? expr) (flatten (map free-vars expr)))
          (else (error)))))

;; find bound (defined) variables in expr
(define bound-vars
  (lambda (expr . args)
    (cond ((symbol? expr) (if (defined? expr) expr '()))
          ((atom? expr) '())
          ((list? expr) (flatten (map bound-vars expr)))
          (else (error)))))

;;;;;;; examples section

(define pat0 (match '(? ? ?)))
(println 'pat0a: (pat0 '(a)))
(println 'pat0b: (pat0 '(a b)))
(println 'pat0c: (pat0 '(a b c)))
(println 'pat0d: (pat0 '(a b c d)))

;; literal match
(define pat1 (match '(a (b c) d)))
(println 'pat1: (pat1 '(a (b c) d))) ;; NIL is a successful match with no named variables present

(define pat2 (match '(? ? ?))) ;; match any 3 elements
(println 'pat2: (pat2 '(a (b c) d))) ;; success!

(define pat3 (match '(?symbol ?list ?symbol))) ;; match 1 symbol followed by 1 list followed by 1 symbol
(println 'pat3a: (pat3 '(a (b c) d))) ;; success!
(println 'pat3b: (pat3 '(a (b . c) d))) ;; fails - pairs are not lists!

(define pat4 (match '(a?symbol bc?pair d?symbol))) ;; match a symbol followed by a pair followed by a symbol
(println 'pat4a: (pat4 '(a (b . c) d))) ;; success with - and now with named variables!
(println 'pat4b: (pat4 '(aa (bb . cc) dd))) ;; success

(define pat5 (match '(one? (two? . three?) four?))) ;; match inside pair
(println 'pat5a: (pat5 '(a (b . c) d))) ;; success return named matches from inside pair
(println 'pat5b: (pat5 '(#(a a1) (b . c) "hello world"))) ;; match mix of types (no type checks defined in pattern)

(define pat6 (match '(nums??number syms??symbol))) ;; match 1 or more numbers followed by 1 or more symbols
(println 'pat6a (pat6 '(1 2 3 a b c))) ;; success
(println 'pat6b (pat6 '(1 a b c))) ;; success
(println 'pat6c (pat6 '(a b c))) ;; fails - need at least one number

(define pat7 (match '(nums???number syms???symbol))) ;; match 0 or more numbers followed by 0 or more symbols
(println 'pat7 (pat7 '(a b c))) ;; success (0 or more numbers)

(define pat8 (match '(a??? (b??? (one? two? three?) c???) d???)))
(println 'pat8a (pat8 '(a (b (c d e) f) g)))
(println 'pat8b (pat8 '(a "a" 1 (b "two" 2 (c d e)))))
(println 'pat8c (pat8 '(((c d e) (f g h) (i j k)))))
(println 'pat8d (pat8 '(a (b (c d) (c d e) (c d) f) g)))

(define pat9 (match '(a b c)))
(println 'pat9 (pat9 '(a))) ;; fail
(println 'pat9 (pat9 '(a b))) ;; fail
(println 'pat9 (pat9 '(a b c))) ;; success!
(println 'pat9 (pat9 '(a b c d))) ;; fail!


;; matches "x" and "y" only
(define custom-match
  (lambda (x) 
    (and (string? x) 
         (or (string=? x "x") 
             (string=? x "y")))))

(define pat10 (match '(lst??custom-match)))
(println 'pat10a (pat10 '("x" "y" "y" "x" "x"))) ;; success!
(println 'pat10a (pat10 '("x" "y" "aaa" "x" "x"))) ;; fail
(println 'pat10a (pat10 '("x" "y" 'y "x" "x"))) ;; fail (symbol y not a string)



       

;; ((p = q) = r) = (p = (q = r))
(define-macro (axiom-of-association . expr)
  (println 'expr expr)
  (let ((res ((match '(((p? = q?) = r?) = (p? = (q? = r?)))) expr)))
    (println 'res res)))

(define axiom-of-association? 
  (lambda (expr)
    (let* ((pat (match '(((p? = q?) = r?) = (p? = (q? = r?)))))
           (res (pat expr))
           (pqr (cl:duplicates (flatten (map cdr (if res res '()))))))
      (= (length pqr) 3))))

;; axiom of association
(define ax-of-a
  (lambda (expr)
    (let* ((pat1 (match '((p? = q?) = r?)))
           (pat2 (match '(p? = (q? = r?)))) 
           (res1 (pat1 expr))
           (res2 (pat2 expr))
           (res (if res1 res1 (if res2 res2 '()))))
      (if (or (not res) (null? res)) 
          #f
          (let ((p (mkey "p" res))
                (q (mkey "q" res))
                (r (mkey "r" res)))
              `(,(car p) = ,(car q) = ,(car r)))))))
    
(println
  (ax-of-a '((10 = x) = y))
  (ax-of-a '(10 = (x = y)))
  (ax-of-a '(10 === (x = y)))) ;; last should fail as not a valid ax-of-a
  
(println (axiom-of-association? '(((p = q) = r) = (p = (q = r)))))

    (match? expr '(equal? (equal? _a _b) ?))
    (equal? (car expr) 'equal?)
           

    
    